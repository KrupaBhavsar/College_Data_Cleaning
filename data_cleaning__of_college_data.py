# -*- coding: utf-8 -*-
"""Data_Cleaning _Of_College_Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k-08etvFEz_6AIjHqPwriJqhdRzsVJva
"""

# First Step Data Cleaning
# How many rows does our dataframe have?

# How many columns does it have?

# What are the labels for the columns? Do the columns have names?

# Are there any missing values in our dataframe? Does our dataframe contain any bad data?

import pandas as pd;

file=pd.read_csv("salaries_by_college_major.csv");

file.head()

file.shape

file.columns

# Dealing with missing values and junk data

# isna() is a method with spot the problems

file.isna()

file.tail()

# Delect the last row using dropna()

clean_data=file.dropna()

clean_data.tail()

# accessing columns and individual cells

clean_data['Starting Median Salary']

# highest salary using max()

clean_data['Starting Median Salary'].max()

clean_data['Starting Median Salary'].idxmax()

clean_data['Undergraduate Major'].loc[43]

clean_data['Undergraduate Major'][43]

clean_data.loc[43]

# The Highest Mid-Career Salary
print(clean_data['Mid-Career Median Salary'].max())

print(clean_data['Mid-Career Median Salary'].idxmax())

clean_data.loc[8]

# The Lowest Starting and Mid-Career Salary
print(clean_data['Starting Median Salary'].min())

print(clean_data['Starting Median Salary'].idxmin())

clean_data.loc[49]

# Sorting Values & Adding Columns: Majors with the Most Potential vs Lowest Risk
spread_col=clean_data['Mid-Career 90th Percentile Salary']-clean_data['Mid-Career 10th Percentile Salary']

clean_data.insert(1,'Spread',spread_col)

clean_data.head()

low_risk=clean_data.sort_values('Spread')

low_risk[['Undergraduate Major','Spread']].head()

print(clean_data.columns)

high_risk=clean_data.sort_values( 'Mid-Career 90th Percentile Salary',ascending=False)

high_risk[['Undergraduate Major', 'Mid-Career 90th Percentile Salary']].head()

# Grouping and Pivoting Data with Pandas
clean_data.groupby('Group').count()

clean_data.groupby('Group').mean()

pd.options.display.float_format = '{:,.2f}'.format
clean_data.groupby('Group').mean()

